{"version":3,"sources":["./src/app/shared/chat/chat-routing.module.ts","./src/app/shared/chat/chat.component.ts","./src/app/shared/chat/chat.component.html","./src/app/shared/chat/chat.module.ts","./src/app/shared/chat/chat.service.ts"],"names":[],"mappings":"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","file":"default~shared-chat-chat-module~shared-shared-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ChatComponent } from './chat.component';\n\nconst routes: Routes = [{ path: 'conv/:pid/:uid', component: ChatComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ChatRoutingModule { }\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ChatService } from './chat.service';\nimport { Subscription } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})\nexport class ChatComponent implements OnInit, OnDestroy {\n\n  messagesHistory: {sender: string, message: string} [] = [];\n  messagesSubscription: Subscription;\n  chatSubscription: Subscription;\n  msg = '';\n  myId: string;\n  receiverId:  string;\n\n  professionalId: string;\n  userId: string;\n\n  constructor(private chatService: ChatService, private route: ActivatedRoute) {\n    this.messagesHistory = [\n      {sender: '5ea75bf3f3e19c29d2c01218', message: 'Hola'},\n      {sender: '5ebce58c628b803f1bf7a52f', message: 'Qué tal'},\n      {sender: '5ea75bf3f3e19c29d2c01218', message: 'Quisiera más informes, por favor'},\n      {sender: '5ebce58c628b803f1bf7a52f', message: 'Claro, el precio por hora es de $100'},\n      {sender: '5ea75bf3f3e19c29d2c01218', message: 'Gracias'},\n      {sender: '5ebce58c628b803f1bf7a52f', message: 'Por nada'},\n    ];\n   }\n  ngOnDestroy(): void {\n    \n    this.messagesSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n\n    this.route.params.subscribe((params) => {\n      this.professionalId = params.pid;\n      this.userId = params.uid;\n    });\n\n    this.myId = this.userId;\n    this.receiverId = this.professionalId;\n\n    // get messages from the backend and store them in messagesHistory;\n\n    this.chatService.startChat('connecting');\n\n    // this.chatSubscription = this.chatService.connectedToChat()\n    // .subscribe((msg: string) => {\n    //   console.log(msg);\n    //   if (this.myId === 1) {\n    //     this.myId = 2;\n    //   } else {\n    //     this.myId = 1;\n    //   }\n    // });\n\n    // this.myId ++;\n    // console.log(this.myId);\n\n    this.messagesSubscription = this.chatService.getMessages()\n    .subscribe((msg: {message: string, sender: string}) => {\n      // save messages somewhere\n      console.log(\"message \", msg);\n      // const message = {message: msg, sender};\n      this.messagesHistory.push(msg);\n      console.log(msg);\n    });\n  }\n\n  sendMessage() {\n    this.chatService.sendMessage(this.msg, this.myId);\n    this.msg = '';\n\n  }\n\n  simulateReceiver() {\n    const tmp = this.myId;\n    this.myId = this.professionalId;\n    this.professionalId = tmp;\n  }\n\n}\n","<div class=\"container\">\n    <h3 class=\" text-center\">Messaging</h3>\n    <div class=\"messaging\">\n        <div class=\"inbox_msg\">\n            <div class=\"mesgs\">\n                <div class=\"msg_history\">\n                    <div *ngFor=\"let message of messagesHistory\">\n                        <div *ngIf=\"message.sender != myId\" class=\"incoming_msg\">\n                            <div class=\"incoming_msg_img\"> <img src=\"https://ptetutorials.com/images/user-profile.png\"\n                                    alt=\"receiver\"> </div>\n                            <div class=\"received_msg\">\n                                <div class=\"received_withd_msg\">\n                                    <p>{{message.message}}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div *ngIf=\"message.sender == myId\" class=\"outgoing_msg\">\n                            <div class=\"sent_msg\">\n                                <p>{{message.message}}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"type_msg\">\n                    <div class=\"input_msg_write\">\n                        <input type=\"text\" [(ngModel)]=\"msg\" (keydown.enter)=\"sendMessage()\" class=\"write_msg\" placeholder=\"Type a message\" />\n                        <button class=\"msg_send_btn\" (click)=\"sendMessage()\"  type=\"button\"><i class=\"fa fa-paper-plane\"\n                                aria-hidden=\"true\"></i></button>\n                    </div>\n                </div>\n                <button type=\"button\" (click)=\"simulateReceiver()\" class=\"btn btn-primary\"></button>\n            </div>\n        </div>\n\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChatRoutingModule } from './chat-routing.module';\nimport { ChatComponent } from './chat.component';\nimport { FormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [ChatComponent],\n  imports: [\n    CommonModule,\n    ChatRoutingModule,\n    FormsModule\n  ]\n})\nexport class ChatModule { }\n","import { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  messagesHistory: {sender: number; receiver: number,  message: string} [] = [];\n\n  constructor(private socket: Socket) {\n    this.messagesHistory = [\n      {sender: 2, receiver: 1, message: 'Hola'},\n      {sender: 1, receiver: 2, message: 'Qué tal'},\n      {sender: 2, receiver: 1, message: 'Quisiera más informes, por favor'},\n      {sender: 1, receiver: 2, message: 'Claro, el precio por hora es de $100'},\n      {sender: 2, receiver: 1, message: 'Gracias'},\n      {sender: 1, receiver: 2, message: 'Por nada'},\n    ];\n   }\n\n   // connecting to the chat\n   public startChat(message) {\n        this.socket.emit('startChat', message);\n  }\n\n  // confirmation\n  public connectedToChat() {\n    return Observable.create((observer) => {\n      this.socket.on('startChat', (message) => {\n        observer.next(message);\n      });\n    });\n  }\n\n  // senging a message\n  public sendMessage(message, sender) {\n    this.socket.emit('send', message, sender);\n  }\n\n  // getting a message\n  public getMessages() {\n    return Observable.create((observer) => {\n      this.socket.on('refresh', (message) => {\n        observer.next(message);\n      });\n    });\n  }\n\n  // refreshMessages() {\n  //   this.messagesHistory.push\n  // }\n\n}\n"],"sourceRoot":"webpack:///"}